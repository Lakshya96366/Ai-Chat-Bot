const API_KEY = 'AIzaSyAToUy60RXVyR-mDVtUZqMAu3beoanKCP0';
const SYSTEM_PROMPT = "You are an agricultural AI assistant. Your primary focus is on providing information about agriculture, farming, seeds, crop protection, and related topics. For general conversation (like greetings), keep responses brief and friendly. For non-agricultural questions, politely explain that you specialize in agriculture-related topics. Detect and respond in the same language as the user's input. Format responses properly with: Paragraphs for detailed explanations, numbered lists (1,2,3) for steps, and bold text for key points.";

let isBotTyping = false;

function showTypingIndicator() {
    if (isBotTyping) return;

    const chatMessages = document.getElementById('chatMessages');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message bot-message';
    typingDiv.id = 'typingIndicator';

    const avatar = document.createElement('div');
    avatar.className = 'avatar bot-avatar';
    avatar.innerHTML = 'ðŸŒ±';

    const content = document.createElement('div');
    content.className = 'message-content';
    content.innerHTML = `
        <div class="typing-indicator">
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        </div>
    `;

    typingDiv.appendChild(avatar);
    typingDiv.appendChild(content);
    chatMessages.appendChild(typingDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
    isBotTyping = true;
}

function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
    isBotTyping = false;
}

async function generateResponse(userMessage) {
    const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

    try {
        const response = await fetch(`${url}?key=${API_KEY}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: `${SYSTEM_PROMPT}\n\nUser: ${userMessage}\nAssistant:`
                    }]
                }]
            })
        });

        const data = await response.json();
        let botResponse = data.candidates[0]?.content?.parts[0]?.text || "Sorry, I couldn't generate a response.";

        return formatResponse(botResponse);
    } catch (error) {
        console.error('Error:', error);
        return "Sorry, I'm having trouble responding right now. Please try again later.";
    }
}

// Function to format bot response properly
function formatResponse(text) {
    // Convert "*" bullet points to numbered lists (1,2,3) or bullet points (â€¢)
    let listCount = 1;
    text = text.replace(/\n\* (.+)/g, () => `<br>${listCount++}. <strong>$1</strong>`);
    text = text.replace(/\nâ€¢ (.+)/g, () => `<br>â€¢ <strong>$1</strong>`);

    // Convert "**text**" into <strong>text</strong> (for bold text)
    text = text.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');

    // Convert multiple new lines to paragraph breaks
    text = text.replace(/\n\n/g, '</p><p>');

    // Ensure that each list item appears on the next line
    text = text.replace(/(<br>)/g, '$1\n');

    // Wrap in a paragraph tag if not already formatted
    if (!text.startsWith('<p>')) {
        text = `<p>${text}</p>`;
    }

    return text;
}

function addMessage(message, isUser = false, isHTML = false) {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;

    const avatar = document.createElement('div');
    avatar.className = `avatar ${isUser ? 'user-avatar' : 'bot-avatar'}`;
    avatar.innerHTML = isUser ? 'ðŸ‘¤' : 'ðŸŒ±';

    const content = document.createElement('div');
    content.className = 'message-content';

    if (isHTML) {
        content.innerHTML = message;
    } else {
        content.textContent = message;
    }

    messageDiv.appendChild(avatar);
    messageDiv.appendChild(content);
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

async function sendMessage() {
    const userInput = document.getElementById('userInput');
    const message = userInput.value.trim();

    if (!message) return;

    addMessage(message, true);
    userInput.value = '';

    showTypingIndicator();

    try {
        const response = await generateResponse(message);
        hideTypingIndicator();
        addMessage(response, false, true);
    } catch (error) {
        hideTypingIndicator();
        addMessage("Sorry, I'm having trouble responding right now. Please try again later.");
    }
}

function initializeChat() {
    addMessage(
        "<p>Hello! I'm your <strong>AgriAI Assistant</strong>. ðŸŒ± Ask me about:</p>" +
        "<p><strong>1.</strong> Crop rotation<br>" +
        "<strong>2.</strong> Pest control<br>" +
        "<strong>3.</strong> Soil health<br>" +
        "<strong>4.</strong> Farming techniques<br>" +
        "<strong>5.</strong> Seed selection</p>" +
        "<p>And any other <strong>agriculture-related</strong> topics!</p>" +
        "<p><strong>Random Questions to start with:</strong></p>" +
        "<p>â€¢ What are the benefits of crop rotation?</p>" +
        "<p>â€¢ How can I prevent pests from attacking my crops?</p>" +
        "<p>â€¢ What is the ideal soil pH for growing vegetables?</p>" +
        "<p>â€¢ How do I select the best seeds for my farm?</p>",
        false,
        true
    );
}

function clearChat() {
    const chatMessages = document.getElementById('chatMessages');
    while (chatMessages.children.length > 1) {
        chatMessages.lastChild.remove();
    }
    isBotTyping = false;
}

// Add event listener for Enter key
document.getElementById('userInput').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// Add event listener for Send button
document.getElementById('sendButton').addEventListener('click', () => {
    sendMessage();
});

// Initialize chat when page loads
window.onload = initializeChat;
